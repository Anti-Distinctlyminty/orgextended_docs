

* Todo Basics
	This is a simple study in managing your daily ins and outs using OrgExtended.
	Org is a swiss army knife. It is, what you make of it. 

	[[file:images/learning_todo_headings.gif]]

	Keybindings for these operations can be found in the keybindings file.
	You can find the keymap in the package settings menus.

	- For regular users most of the org bindings are under Alt+o
	- For NeoVintageous users most of the bindings are behind <space> in normal mode with the same followers as the Alt+o equivalents

	Our study begins with taking structured notes. We are at a meeting,
	during that meeting we flow in and out of topics. As I take notes
	it helps to be able to put each topic under it's own sub heading.

	As we do this, I am using insert heading and insert child. 

	#+BEGIN_EXAMPLE
	Alt+o i h and Alt+o i c
	#+END_EXAMPLE

	Another way to do this is to use Ctrl+Enter
	This runs the Do What I Mean (DWIM) Insert mechanism.
	These DWIM commands are context aware operations. Org has several
	primary DWIM commands:

	- Execute
	- Toggle
	- Insert
	- Fold

	Using the insert DWIM operation, what happens depends on where
	I am in my document.

	- If you are on a checklist it will insert a new checklist item.
	- If you are on a numbered list it will insert the next entry.
	- If you are on a heading it will insert a new heading.

	Basic note taking is pretty straight forward. Org uses stars much like markdown uses the number sign
	to denote heading levels.

	#+BEGIN_EXAMPLE
  ** My Meeting
     We are taking some notes for this meeting
  *** Sub Topic 1
	    These notes belong to sub topic 1
  **** Sub Sub Topic 1
	     A sub topic of the sub topic.
  *** Sub Topic 2
	    More notes
	#+END_EXAMPLE

	As I am taking notes I realize I have some things I need to do. We might call these action items.
	Org expects that todos come up anywhere in your work. You need to mark this thing as a todo.
	Org expects that action items flow through a stateflow. They start in a new state and progress through a flow
	of your designing. Sadly, I have not found a way to easily allow you to extend OrgExtendeds syntax highlighting!
	That said, OrgExtended still accepts custom todo state flows.

	The default state flow is defined globally in your config file.
	if you would like to tweak this you can edit the list in your config file:

	#+BEGIN_EXAMPLE
    "todoStates": ["TODO","NEXT", "BLOCKED","WAITING","|", "CANCELLED", "DONE","MEETING","PHONE","NOTE"],
	#+END_EXAMPLE

	The vertical bar defines the states that are considered "open" and the states that are considered closed by org.
	You can also create a custom flow in an org file by defining a todo comment in your org file:

	#+BEGIN_EXAMPLE
	  #+TODO: REPORT BUG KNOWNCAUSE | FIXED
	#+END_EXAMPLE

  A todo is simply a heading with a TODO keyword as the first item on the line.

  #+BEGIN_EXAMPLE
    * TODO This is a todo
  #+END_EXAMPLE

  This is now recognized by org as a TODO that needs doing. So as you author your meeting notes, you realize that your todos are right in the middle of your
  meeting notes. You are going to need to take those out of your meetings notes and add them to your own todo lists right? 
  
  - *Actually you don't need to*.

  Org expects that as things come up, you jot them down in context relevant locations. 
  One of the many things that org mode tries to do for you is provide the concept of the agenda and filtered todo lists to make
  managing your todos less labor intense. When OrgExtended starts up, it parses all valid files in your orgDir to build your agenda and any todo views
  you have defined. These views are customizable in their own right, but we will gloss over that for the moment.

  OrgExtended will parse these files in the background as it starts up. The more files you have in your active list, the longer this background initialization
  will take. That said, OrgExtended tends to make fast work of quite a few files.

  #+BEGIN_EXAMPLE
    // Where are your org files?
    "orgDirs": [
        "c:\\Users\\ian\\notes"
    ],

    // Specific files to add vs whole directories
        "orgFiles": [
    ],

    // Directories to exclude from parsing org files
    "orgExcludeDirs": [],

    // Files to be excluded from org parsing
    "orgExcludeFiles": [],
  #+END_EXAMPLE

  So now what? Org knows about the todos. How does that help me?
  We will talk about tagging later, but for the moment a little demonstration can be beneficial.

  I am going to add a random todo to a file, I then I will call up a generic todo view and it has my todo in it.
  I can then jump to the todo quite easily.

  [[file:images/learning_todo_tododemo.gif]]

  Okay, so that's already pretty useful. I can add action items anywhere and find them and jump around after the fact.
  Org Mode goes further. It helps to add meta data to your work to give context:
  - When are you planning to start it?
  - When does it need to be done?
  - Is this an appointment verses a project?
  - Are there subtasks? If so, what is the next thing you need to work on?
  - Do you have a time estimate associated with this thing?
  - Is it associated with an external bug tracking system, if so what is the ID?

  Etc Etc Etc.

  Lets continue with the examples. 
  Here we are going to work with the Do What I Mean insert and toggling functions.
	The toggling function will not only change the todo state of a heading it will 
	change the state of a checkbox etc.

	#+BEGIN_EXAMPLE
	  <space> t
	  Alt+o t
	#+END_EXAMPLE

  I am going to insert some headings, set them to todos and add a scheduled entry. 

	[[file:images/learning_todo_todos.gif]]

	#+BEGIN_EXAMPLE
    * TODO Project A
      SCHEDULED: <2021-02-15 Mon 10:41> 
    ** TODO Task 1
    *** This is a sub task  
	#+END_EXAMPLE


* Org Everywhere

	Before we continue and discuss the next logical step, the agenda, we should make time
	for a little aside.

	While this is useful, todos are more useful if you can access them from everywhere.
	Org becomes more useful if you can access your org files from your mobile device.
	I find it handy to store my todo lists in dropbox while my notes are often stored
	in a git repository. There are several mobile orgmode viewers. I personally use Orgzly.

	[[file:images/orgzly.png]]

  Orgzly can sync with dropbox automatically for you and show you your todos on your mobile device.
  It can also read your schedule information and notify you about up and comming events.

  In the past I have synced some of my todos with google calendar or jira. I have yet to write a plugin to do so with
  my org files on sublime, although this is entirely possible.

* Agenda

	At this point you have a simple todo list, it is in the middle of my notes!
	We have added a SCHEDULED tag, but our todo list doesn't really convey that information!

	This is where the agenda comes in. There are a number of agenda views and I hope
	to help you build your own in the future. You will need to read the more in depth sections
	of the docs on how to customize your agenda views. For now we will stick with the default view.

	Based on how you have your agenda configured your agenda can find your todos in your files. 
	It is really just a set of fancy todo views that let you visualize your todo content in 
	more schedule oriented ways.

	The todo list and the agenda both support enter to open a file in the primary sheet
	while space will open it in another tab. 

	I modified the time in the scheduled note by pulling in the time a little. 
	This is because I have my agenda restricted to only show working hours and it wouldn't
	make much of a demonstration if it did not appear on the agenda.

	To bring up the agenda I use the "org agenda" binding. This brings up the Default
	agenda view from my config file. By default it is a composite view that I find useful.

	#+BEGIN_EXAMPLE
	  Alt+o o a

	  of for vim users

	  <space> o a - in normal mode
	#+END_EXAMPLE

	As I mentioned before, there are agenda specific keybindings. If you press enter on an item you will jump to it.
	If you press space it will open up in a different layout window. You can clock and change status from
	within the agenda as well.

	[[file:images/learning_todo_agenda.gif]] 

	In the example I use the SCHEDULED marker. These are a powerful yet
	complicated part of org mode. We don't currently support the full gamut of
	org functionality, but I hope to in the future. In particular some of the recurrence
	options with timestamps is poorly supported, but will hopefully improve in the future.

	- SCHEDULED :: This marks where you want to START working on something it will appear in the agenda until you close the task. So generally this is used on tasks that may take some time.
	- DEADLINE :: Like scheduled this marks where you want to be DONE working on something. You can specify a warning marker in the time. By default you will get a warning 1 day before your deadline. If the task is still open after the deadline it will be marked as overdue.
	- < Active Timestamp > :: without a deadline or scheduled prefix this event will happen once at the selected time. 


* Priorities

	Org supports priorities. These are just simple tags that identify 
	how important this task is to you.

	[[file:images/learning_todo_priorities.gif]]


    #+BEGIN_EXAMPLE
    * A heading
    ** TODO [#B] Task 1
    ** TODO [#A] Task 2
    ** TODO Task 3
    ** TODO Task 4
    #+END_EXAMPLE

* Checkboxes

	Before we get to far down the road of managing todos. It helps to see some of the rich things you can add to your
	todos. Org supports the usual *bold* =verbatim= _underscore_ /italic/ and a host of other markers.
	In addition to that there are some rich items that you can add as content. Lets take a quick aside to skim
	just a few ot those.

  Sometimes you just need a quick list!
  Here I am using the DWIM style Ctrl+Enter to add new entries and the DWIM toggle command to toggle the checkbox
  entries.

  [[file:images/learning_todo_checkbox.gif]]

  #+BEGIN_EXAMPLE
  - [x] Checkbox list
  - [x] More in the list [100%] 
      - [x] Sub list!
      - [x] More
  #+END_EXAMPLE

* Lists
	
	While our support for it is still in its infancy and sometimes buggy, Do What I Mean or DWIM style editing is a corner stone of
	orgmode. This sort of automatic insertion should work with headings, lists, numbered lists and checkboxes. Adding the shift modifier should
	cause the DWIM insertion to append to the end of the list rather than
	adding right at point.

	[[file:images/learning_todo_dwim.gif]]

* Tables

	Org has fancy tables, they behave very much like spreadsheets. We don't quite have that yet.
	But we are headed in that direction! Thanks to the excellent Table Editor plugin, here I am using tab to skip to the next cell and reformat
	the table. Eventually I would like to have cell formulas and babel inputs like org.

	[[file:images/learning_todo_tables.gif]]

	| Heading 1 | H2 |        H3       |
	|-----------+----+-----------------|
	| This      | is | something fancy |
	| Well      | a  | table at least  |
	|-----------+----+-----------------|

	You can insert blank tables using some helper methods:

	[[file:images/blank_table_insert.gif]]

	You can also convert a region dynamically into a table:

	[[file:images/convert_region_to_table.gif]]

	Table manipulation is much easier when you can reorganize the table dynamically.
	Here I am importing the table from a CSV and manipulating the table contents
	dynamically using the table keybindings:

	[[file:images/table_manipulation.gif]]

	While still in its infancy/preview we have some rudimentary support for some of the org spreadsheet features

	#+BEGIN_EXAMPLE
  | Student  | Maths | Physics | Mean |
  |----------+-------+---------+------|
  | Bertrand |    13 |      09 | 11.0 |
  | Henri    |    15 |      14 | 14.5 |
  | Arnold   |    17 |      13 | 15.0 |
  #+TBLFM: $4=vmean($2..$3)
	#+END_EXAMPLE


	[[file:images/table_formulas.gif]]	


	Org recommends you do not edit the actual TBLFM line. Instead insert your formulas directly into the cell
	with the formula. There are 2 primary operators := which will only update this cell and plain equals which will
	update the entire column.

	#+BEGIN_EXAMPLE
  | Student  | Maths | Physics |      Mean      |
  |----------+-------+---------+----------------|
  | Bertrand |    13 |      09 | =vmean($2..$3) |
  | Henri    |    15 |      14 |                |
  | Arnold   |    17 |      13 |                |
	#+END_EXAMPLE

	[[file:images/table_formulas_insert.gif]]



* Tagging

	Okay back to managing those todos we have been working so hard to keep track of.
	As you get more todos things can get confusing without some way of organizing
	your efforts. Welcome to tags.

	You can tag any heading with a tag (or multiple tags. Once you have tagged it you can filter
	based on that tag. Here I am going to use a generic filtered todo view to only
	view todo items tagged with TA.

	[[file:images/learning_todo_tags.gif]]

	#+BEGIN_EXAMPLE
    * A heading
    ** TODO Task 1                                                            :TA:
    ** TODO Task 2
    ** TODO Task 3                                                            :TA:
    ** TODO Task 4
	#+END_EXAMPLE

	Tags are not the only way to curate your data. Property drawers and properties are another way
	that org allows you to add meta data to your notes. Property drawers are a common means of
	tracking notes that live elsewhere, such as google calendar, or in jira. Or tag an item with metadata such as
	estimates of how long a task will take. In fact column mode in emacs (which we don't yet support) is all about
	tabular editing of properties associated with a document.

	#+BEGIN_EXAMPLE
* Heading
  :PROPERTIES:
    :KEY: Value
  :END:
	#+END_EXAMPLE

	Again, org extended will try to fold these automatically to avoid clutter.

* Links
	So, at this point you have been authoring your notes and todos, you can find your active todos within your notes.
	Sometimes however, you want to leave a trail of breadcrumbs for yourself. Or perhaps you want to store an external link.

	Org links are fairly powerful. You can link within a document by creating dynamic targets:

	#+BEGIN_EXAMPLE
	  <<Anchor>>
	#+END_EXAMPLE

	That said, any heading is itself a dynamic target:
	#+BEGIN_EXAMPLE
	  [[file:myfile.org::*MyHeading]]
	#+END_EXAMPLE

	External links work as well, org will try to collapse the url portion of the link to hide those unsightly urls.

	#+BEGIN_EXAMPLE
	  [[http://myurl.com][Some Text]]
	#+END_EXAMPLE

	Of course org tries to help you here to. You can create a link to a file using a command or use a snippet
	to insert a new link:

	#+BEGIN_EXAMPLE
	  <l
	#+END_EXAMPLE

* Capturing
	One of the powerful features of org is capturing. OrgExtended uses snippets for building capture templates.

	TODO FINISH this 