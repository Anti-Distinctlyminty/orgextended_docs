* Sublime Setup
    OrgExtended is still in review and has yet to be accepted as a sublime
    plugin. To use this plugin you will need to manually clone this repo
    into your plugins folder. Please be advised, while this plugin is 
    something I plan to mature and keep extending, it is far from perfect
    and it is certainly not my day job. There are no guarantees for this plugin. It very well may gain sentience and try to take over the world.
    That said, constructive, professional criticism is welcomed.

    On windows this means cloning like so (NOTE THE CASE!):

    #+BEGIN_SRC powershell
    git clone https://github.com/ihdavids/orgextended.git C:\Users\<YOUR USERNAME>\AppData\Roaming\Sublime Text\Packages\OrgExtended
    #+END_SRC    

    On Mac you will need to clone like so (NOTE THE CASE!):

    #+BEGIN_SRC powershell
     git clone https://github.com/ihdavids/orgextended.git ~/Library/Application Support/Sublime Text 3/Packages/OrgExtended  
    #+END_SRC 

    On Linux:

    #+BEGIN_SRC powershell
     git clone https://github.com/ihdavids/orgextended.git ~/. config/sublime-text-3/Packages/OrgExtended 
    #+END_SRC

    Once cloned you will likely need to restart sublime a couple of times.
    OrgExtended installs some dependencies AND some additional packages.
    (Namely Table Editor, which is how it currently provides table editing support)

    Once installed you will need to configure the plugin.
	To get started the only really important item is your orgDirs entry.
	This tells sublime where scan for org mode files for use in auto completion, the agenda and various other tools. This is an important
    setting to provide. Go to:

    #+BEGIN_EXAMPLE
      Preferences > Package Settings > OrgExtended > User Settings 
    #+END_EXAMPLE

    OrgExtended should have copied over an example settings file for you
    to edit.

	The color scheme currently must be either:

    #+BEGIN_EXAMPLE
    OrgExtended or OrgExtended-Light
    #+END_EXAMPLE

    NOTE: You can build your own color schemes and I encourage you to help
          in development by doing so. That said, OrgExtended uses a custom
          colour scheme for org files that adds support for quite a few
          org specific extensions. 

          Org Extended now has a custom color scheme generator. It is still
          in development, see below for additional information.

  #+BEGIN_SRC js
  {
    // The color scheme to use for the capture buffer
    "color_scheme": "Packages/OrgExtended/OrgExtended-Light.sublime-color-scheme",

    // Where are your org files?
    "orgDirs": [
        "c:\\Users\\ian\\notes"
    ],
  }
  #+END_SRC

  [[file:images/light-color-scheme.gif]]

** Excluding Files
   Often it is helpful to exclude some subdirectories in your orgDirs. This can be done as follows:

  #+BEGIN_SRC js
	"orgExcludeDirs": [
		"c:\\Users\\ian\\notes\\old",
		"c:\\Users\\ian\\notes\\caldav",
	],

  #+END_SRC

** HTML Export
   You can customize the HTML exporter as follows:
   TODO: Extend this!

   #+BEGIN_SRC js
	"HtmlStyle": "funky"
   #+END_SRC

** Capture Templates
	Capture templates are a core element of Org Mode in general.
	This is still in its infancy but growing.
  #+BEGIN_SRC js
    // I use this symbol for {refile} symbol expansion below.
    "refile": "D:\\Build\\notes\\refile.org",
    
    // Org Capture templates $0 is where the cursor ends up.
    "captureTemplates":
    [

        {
            // Although not fully implemented
            // This is what I am heading towards:
            // - types
            // - snippet insertion for the template
            // - target selection methods
            // - properties insertion.
            // - better capture buffer (not a panel)
            "name":    "Todo",
            // types:
            // entry      - An Org mode node, with a headline. Will be filed as the child of the target entry or as a top-level entry
            // item       - A plain list item, placed in the first plain list at the target location
            // checkitem  - A checkbox item. This only differs from the plain list item by the default template
            // table-line - A new line in the first table at the target location. 
            //              Where exactly the line will be inserted depends on the properties :prepend and :table-line-pos (see below)
            // plain      - Text to be inserted as it is.
            "type":    "entry",
            // A sublime snippet that should be used as the template for the capture buffer
            // I am working on interesting variables for this.
            // TODO: Document the variables!
            "snippet": "todo_heading",
            // ONLY FILE IS IMPLEMENTED AT THIS POINT!
            // targets: 
            // file           - text appened at end of file.
            // id             - text appened to existing org id in db
            // file+headline  - unique headline in file
            // file+olp       - full path to headline
            // file+regexp    - heading is a match to the regexp
            // file+datetree  - This target creates a heading in a date tree for today’s date. 
            //                  If the optional outline path is given, the tree will be built under the node it is pointing to
            // clock          - insert under current item being clocked.
            // function <name>- generic function to find location for you
            "target": ["file","{refile}"],
            // NOT IMPLEMENTED:
            // PROPERTIES!
            // prepend - Normally new captured information will be appended at the target location (last child, last table line, last list item, …). Setting this property changes that.
            // immediate-finish - When set, do not offer to edit the information, just file it away immediately. This makes sense if the template only needs information that can be added automatically.
            // empty-lines - Set this to the number of lines to insert before and after the new item. Default 0, and the only other common value is 1.
            // clock-in - Start the clock in this item.
            // clock-keep - Keep the clock running when filing the captured entry.
            // clock-resume - If starting the capture interrupted a clock, restart that clock when finished with the capture. Note that clock-keep has precedence over clock-resume. When setting both to non-nil, the current clock will run and the previous one will not be resumed.
            // time-prompt - Prompt for a date/time to be used for date/week trees and when filling the template. Without this property, capture uses the current date and time. Even if this property has not been set, you can force the same behavior by calling org-capture with a C-1 prefix argument.
            // tree-type - When week, make a week tree instead of the month tree, i.e., place the headings for each day under a heading with the current ISO week.
            // unnarrowed - Do not narrow the target buffer, simply show the full buffer. Default is to narrow it so that you only see the new material.
            // table-line-pos - Specification of the location in the table where the new line should be inserted. It should be a string like ‘II-3’ meaning that the new line should become the third line before the second horizontal separator line.
            // kill-buffer - If the target file was not yet visited when capture was invoked, kill the buffer again after capture is completed.
            // no-save - Do not save the target file after finishing the capture.
            "properties":
                [

                ],
        },
    ],
   #+END_SRC 

*** Archiving
	Archiving is a very personal choice. By default OrgExtended will archive to a myfile.org_archive file under a Archive heading. You can customize this using the following option:

	#+BEGIN_SRC js
    // Globally where should things be archived?
    // So the following will expand to myfile.org_archive
    // NOTE: org allows for datetree/ and a few other options
    //       we probably only support a subset of those
    //       properly
    "archive": "%s_archive::* Archive",
	#+END_SRC

** Org Extensions
	While sublime controls when to enable the mode for a particular file the background org file scanning can be controlled with the following option:

	#+BEGIN_SRC js
    // The Org DB will not load a file without one of these file extensions.
    // It assumes we are somehow erroneously trying to load something wrong.
    // If you create your own #+ARCHIVE: entries make sure the extensions are in here.
    "validOrgExtensions": [ ".org", ".org_archive"],
	#+END_SRC

** Controlling Default Startup Options
	Org has a STARTUP tag that can be placed in a file. You can control the default startup state in your config file like so:

	#+BEGIN_SRC js
    // Startup is equivalent to #+STARTUP: showall in a file
    // but has an effect on all org files. This controls what mode
    // the org files show as globally. Valid values are:
    // - showall - everything but drawers is shown
    // - showeverything - even drawers are shown.
    // - contents - like a table of contents, contents of headings is hidden but all headings shown
    // - overview - only top level headings are shown. 
    // - noinlineimages - do not show images inline
    // - inlineimages - show inline images in file
    //    #+STARTUP: inlineimages
    //    #+STARTUP: noinlineimages
    "startup": ["showall", "noinlineimages"],
	#+END_SRC

** Images
	Inline image visualization will search for images using the following option:

	#+BEGIN_SRC js
    // When looking for images in org files, where might those images be located?
    // The first path in this list is where generated images will be placed.
    // If this list is empty a subdir of images under the first entry in orgDirs will be used.
    "imageSearchPath": [],
	#+END_SRC

** Other Settings
	TODO: Get around to documenting this stuff.
   #+BEGIN_SRC js

    // We follow the same sort of syntax as the normal orgmode for todos.
    // Right now I don't support logging tags on these, but that will come.
    // I don't have smart syntax highlighting on these. The grammar file gives
    // me some basic highlighting.
    "todoStates": ["TODO","NEXT", "BLOCKED","WAITING","|", "CANCELLED", "DONE","MEETING","PHONE","NOTE"],



    "resolver.jira.url":"http://sandbox.onjira.com/browse/%s",
    "resolver.jira.pattern":"^(jira|j):(?P<issue>.+)$",

    //email
    "resolver.email.url":"mailto:%s",
    "resolver.email.pattern":"^(?P<type>email|mailto):(?P<email>[^/]+)(/(?P<subject>.+))?$",

    //prompt
    "resolver.prompt.pattern":"^(cmd:|prompt:)(?P<path>.+)$",

    //file: Only these extensions will be opened in sublime when in a link others will be opened externally.
    "resolver.local_file.force_into_sublime":"'*.txt', '*.org', '*.py', '*.rb', '*.html', '*.css', '*.js', '*.php', '*.c', '*.cpp', '*.h', '*.png', '*.jpg', '*.gif', '*.cs'",
    //"resolver.local_file.pattern":"^(file:)?(?P<filepath>.+?)(?::(?P<row>\\d+)(?::(?P<col>\\d+))?)?$",

    // For the plantuml source blocks, where is planuml found?
    "plantuml": "D:\\Build\\.imacs\\plantuml.jar",

    // What does the composite agenda view show?
    // You can add your own views but that is done through code.
    // Right now I ONLY have this one composite view.
    "AgendaCustomView": ["Calendar", "Day", "Blocked Projects", "Next Tasks", "Loose Tasks"],

    // This is the template used to notify outside of sublime on org notifications 
    "ExternalNotificationCommand": ["C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe", "-ExecutionPolicy", "Unrestricted", ".\\balloontip.ps1", "\"{todo}\"" , "\"{time}\""]
   #+END_SRC

* Color Scheme Generator

  OrgExtended has a custom color scheme generator. It will take your current color scheme
  and generate an OrgExtended compatible variant out of it. It tries to help with tweaking
  your color scheme by giving you some pointers in the generated file on how best to tweak.

  Here is an example of the version 1.0.7 of OrgExtended's color scheme generator will work. 

  [[file:images/color_scheme_creator.gif]]